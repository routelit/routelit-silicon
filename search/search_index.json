{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"routelit-silicon","text":"<p>RouteLit Silicon is a Python library that extends RouteLit Builder with pre-built UI components and layouts. It provides a showcase of how to create web applications with common UI patterns like sidebars, footers, and other structural elements.</p> <p>The library currently includes:</p> <ul> <li>A components builder that supports sidebar layouts</li> <li>Integration with silicon.css for styling</li> <li>Easy configuration of UI structure through a builder pattern</li> <li>Static asset management for frontend resources</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install routelit-silicon\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from flask import Flask\n\nfrom routelit import RouteLit\nfrom routelit_flask import RouteLitFlaskAdapter\nfrom routelit_silicon import RLBuilder\n\napp = Flask(__name__)\n\nroutelit = RouteLit(BuilderClass=RLBuilder)\nroutelit_adapter = RouteLitFlaskAdapter(\n    routelit,\n    ### TO USE LOCAL VITE DEV SERVER, UNCOMMENT THE FOLLOWING LINES\n    # run_mode=\"dev_components\",\n    # local_components_server=\"http://localhost:5173\"\n).configure(app)\n\n\ndef view(ui: RLBuilder):\n    ui.set_config(use_sidebar=True)\n    with ui.sidebar:\n        ui.title(\"Sidebar\")\n\n    ui.title(\"Main\")\n    ui.text(\"Hello, world! from main\")\n\n    ui.sidebar.text(\"Hello, world! from sidebar\")\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    return routelit_adapter.stream_response(view)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"modules/","title":"Routelit Silicon","text":"<p>               Bases: <code>RouteLitBuilder</code></p> <p>A builder for a RouteLit application with a sidebar. The related frontend uses silicon.css for styling. This Builder serves as example on how to create a RouteLit application with a sidebar. You could use this same idea to create other areas, such as a header, footer, etc.</p> Source code in <code>src/routelit_silicon/builder.py</code> <pre><code>class RLBuilder(RouteLitBuilder):  # type: ignore[no-any-unimported]\n    \"\"\"\n    A builder for a RouteLit application with a sidebar.\n    The related frontend uses silicon.css for styling.\n    This Builder serves as example on how to create a RouteLit application with a sidebar.\n    You could use this same idea to create other areas, such as a header, footer, etc.\n    \"\"\"\n\n    static_assets_targets: ClassVar[list[AssetTarget]] = [  # type: ignore[no-any-unimported]\n        {\n            \"package_name\": \"routelit_silicon\",\n            \"path\": \"static\",\n        }\n    ]\n\n    def _init_sidebar(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"sidebar\",\n            key=\"sidebar\",\n        )\n        return self._build_nested_builder(new_element)  # type: ignore[no-any-return]\n\n    def _init_root(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"root\",\n            key=\"root\",\n        )\n        return self._build_nested_builder(new_element)  # type: ignore[no-any-return]\n\n    def _on_init(self) -&gt; None:\n        # we could configure the sidebar to be set by default by calling `self._config_sidebar()` here\n        # self._config_sidebar()\n        pass\n\n    def _config_sidebar(self) -&gt; None:\n        self._root = self._init_root()\n        with self._root:\n            self._sidebar = self._init_sidebar()\n            self._main = self._init_main()\n        self._parent_element = self._main._parent_element  # type: ignore[has-type]\n        self.active_child_builder = self._main\n\n    def set_config(self, use_sidebar: bool = True) -&gt; None:\n        \"\"\"\n        Set the configuration for the builder.\n        It should be called before any other method is called.\n        This method should be called only once, and cannot be undone.\n        If you need to undo the configuration, rerun the view with `use_sidebar=False`\n\n        Args:\n            use_sidebar (bool): Whether to use a sidebar.\n        \"\"\"\n        if use_sidebar:\n            self._config_sidebar()\n\n    @property\n    def sidebar(self) -&gt; \"RLBuilder\":\n        \"\"\"\n        Get the sidebar element.\n\n        Returns:\n            RouteLitComponentsBuilder: The sidebar element.\n\n        Example:\n        ```python\n        def view(ui: RouteLitComponentsBuilder):\n            ui.set_config(use_sidebar=True)\n            with ui.sidebar:\n                ui.text(\"Hello, world!\")\n\n            # or without context\n            ui.sidebar.text(\"Hello, world!\")\n        ```\n        \"\"\"\n        return self._sidebar\n\n    def _init_main(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"main\",\n            key=\"main\",\n        )\n        return self._build_nested_builder(new_element)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"modules/#routelit_silicon.builder.RLBuilder.sidebar","title":"<code>sidebar</code>  <code>property</code>","text":"<p>Get the sidebar element.</p> <p>Returns:</p> Name Type Description <code>RouteLitComponentsBuilder</code> <code>RLBuilder</code> <p>The sidebar element.</p> <p>Example:</p> <pre><code>def view(ui: RouteLitComponentsBuilder):\n    ui.set_config(use_sidebar=True)\n    with ui.sidebar:\n        ui.text(\"Hello, world!\")\n\n    # or without context\n    ui.sidebar.text(\"Hello, world!\")\n</code></pre>"},{"location":"modules/#routelit_silicon.builder.RLBuilder.set_config","title":"<code>set_config(use_sidebar=True)</code>","text":"<p>Set the configuration for the builder. It should be called before any other method is called. This method should be called only once, and cannot be undone. If you need to undo the configuration, rerun the view with <code>use_sidebar=False</code></p> <p>Parameters:</p> Name Type Description Default <code>use_sidebar</code> <code>bool</code> <p>Whether to use a sidebar.</p> <code>True</code> Source code in <code>src/routelit_silicon/builder.py</code> <pre><code>def set_config(self, use_sidebar: bool = True) -&gt; None:\n    \"\"\"\n    Set the configuration for the builder.\n    It should be called before any other method is called.\n    This method should be called only once, and cannot be undone.\n    If you need to undo the configuration, rerun the view with `use_sidebar=False`\n\n    Args:\n        use_sidebar (bool): Whether to use a sidebar.\n    \"\"\"\n    if use_sidebar:\n        self._config_sidebar()\n</code></pre>"}]}